import json
from channels.generic.websocket import AsyncWebsocketConsumer

class AlarmConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        print(f"üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket –æ—Ç {self.scope['user']}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if self.scope["user"].is_authenticated:
            self.group_name = "alarms"
            await self.channel_layer.group_add(self.group_name, self.channel_name)
            await self.accept()
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.scope['user']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É 'alarms'")
        else:
            print("‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
            await self.close()

    async def disconnect(self, close_code):
        if self.scope["user"].is_authenticated:
            await self.channel_layer.group_discard(self.group_name, self.channel_name)
            print(f"üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.scope['user']} –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É 'alarms'")

    async def send_alarm(self, event):
        await self.send(text_data=json.dumps(event["message"]))