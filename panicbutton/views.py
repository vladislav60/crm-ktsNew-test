from django.contrib.auth.decorators import login_required
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from django.shortcuts import get_object_or_404
from .models import *
from .serializers import *
from django.shortcuts import render
from django.views import View
from django.conf import settings
from django.utils.timezone import now
import logging

@api_view(['POST'])
@permission_classes([IsAuthenticated])  # –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å API
def send_alarm(request):
    """
    –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–≤–æ–∂–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏.
    """
    data = request.data
    latitude = data.get('latitude')
    longitude = data.get('longitude')

    if not latitude or not longitude:
        return Response({'error': '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}, status=400)

    alarm = Alarm.objects.create(
        client=request.user,
        latitude=latitude,
        longitude=longitude
    )

    return Response({'success': '–¢—Ä–µ–≤–æ–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', 'alarm_id': alarm.id}, status=201)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_alarms(request):
    """
    –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥.
    """
    alarms = Alarm.objects.filter(status__in=['pending', 'in_progress']).order_by('-created_at')
    serializer = AlarmSerializer(alarms, many=True)
    return Response(serializer.data)


@login_required
def panic_map_view(request):
    return render(request, 'panicbutton/map.html', {
        'google_maps_api_key': settings.GOOGLE_MAPS_API_KEY,
        'user_api_token': request.user.auth_token.key
    })


from django.utils.timezone import now
from rest_framework.response import Response
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from .models import Alarm
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync
import json

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def create_alarm(request):
    """
    API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–≤–æ–≥–∏ –∫–ª–∏–µ–Ω—Ç–æ–º.
    """
    try:
        data = request.data
        print("üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data)  # –õ–û–ì–ò–†–£–ï–ú –ü–û–õ–£–ß–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï

        client_name = request.user  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        latitude = data.get("latitude")
        longitude = data.get("longitude")

        if not latitude or not longitude:
            return Response({"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"}, status=400)

        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–≤–æ–≥—É
        alarm = Alarm.objects.create(
            client=client_name,
            latitude=float(latitude),
            longitude=float(longitude),
            created_at=now(),
            status="pending"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
        channel_layer = get_channel_layer()
        async_to_sync(channel_layer.group_send)(
            "alarms",
            {
                "type": "send_alarm",
                "message": {
                    "id": alarm.id,
                    "client_name": alarm.client.username,
                    "latitude": alarm.latitude,
                    "longitude": alarm.longitude,
                    "created_at": alarm.created_at.strftime("%Y-%m-%d %H:%M:%S"),
                    "status": alarm.status
                }
            }
        )

        return Response({"success": True, "alarm_id": alarm.id}, status=201)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ create_alarm: {str(e)}")
        return Response({"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}, status=500)